name: Dockerize Feedback Service and Deploy to GKE

on:
  push:
    branches: [main]

# env:
#   PROJECT_ID: ${{ secrets.GKE_PROJECT }}
#   GKE_CLUSTER: autopilot-cluster-1
#   GAR_LOCATION: us-central1
#   GKE_ZONE: us-central1
#   DEPLOYMENT_NAME: shop-api-product-service

jobs:
  docker:
    name: Build, Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Build and push to dockerhub
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/shop-api-feedback-service
        - name: Run the image in a container
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/shop-api-feedback-service
          run: |
            echo "runing the docker image"
            echo "Testing the nodejs  app endpoints"
  deploy_gc:
    name: Deploy to GC
    runs-on: ubuntu-latest

    needs: [build]
    environment: production

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT }}

      - id: "auth"
        uses: "google-github-actions/auth@v0"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
      - run: gcloud container clusters get-credentials ${{secrets.GCP_CLUSTERNAME}} --zone us-central1
      - name: deploy
        run: |
          kubectl delete -f deployment.yaml && kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
          kubectl get services -o wide
          kubectl rollout status deployment/admin-service
          kubectl get deployments